{"version":3,"file":"index.cjs.js","sources":["../src/utils/removeVideoElement.tsx","../src/module/RTCModule.ts"],"sourcesContent":["export const removeVideoElement = ({ id }: { id: string | undefined }) => {\n  const videoEl = document.getElementById(`vid_${id}`);\n  videoEl?.remove();\n};\n","import io, { Socket, ManagerOptions } from \"socket.io-client\";\nimport EventEmitter from \"eventemitter3\";\nimport { IPeers, IStreams, ILogs } from \"../types/rtc-module.types\";\nimport { removeVideoElement } from \"../utils/removeVideoElement\";\n\nconst defaultSocketOptions: Partial<ManagerOptions> = {\n  autoConnect: false,\n  reconnection: true,\n  reconnectionAttempts: 2,\n  reconnectionDelay: 10000,\n  transports: [\"polling\", \"websocket\"],\n};\n\nconst defaultLoggingOptions = {\n  log: true,\n  warn: true,\n  error: true,\n};\n\n/**\n * Create socket.io instance.\n */\nconst createSocket = (overrideOptions?: Partial<ManagerOptions>) =>\n  io(window.location.host, { ...defaultSocketOptions, ...overrideOptions });\n/**\n * RTCModule configuration types\n */\ninterface RTCModuleType {\n  /**\n   * Server path uri\n   */\n  path: string;\n  /**\n   * Socket.io config override\n   */\n  ioOptions?: ManagerOptions;\n  /**\n   * WebRTC ICE configuration\n   */\n  iceConfig: RTCConfiguration;\n  /**\n   * RTCModule logging\n   */\n  logging?: {\n    log: boolean;\n    warn: boolean;\n    error: boolean;\n  };\n}\n\n/**\n * @package RTCModule\n * @param path {string} - server url.\n * @param iceConfig {string} - WebRTC ICE configuration options\n */\nclass RTCModule extends EventEmitter {\n  private _peers: IPeers = {};\n  private _streams: IStreams;\n  private _localStream: MediaStream | undefined;\n  private _myId: string | undefined;\n  private _isAdmin: boolean | undefined;\n  log: ILogs[\"log\"];\n  warn: ILogs[\"warn\"];\n  error: ILogs[\"error\"];\n  user: { name?: string };\n  room: string | undefined;\n  socket: Socket;\n  iceConfig: RTCConfiguration;\n  connectReady: boolean;\n  isOriginator: boolean;\n  inCall: boolean;\n  isSetup: boolean;\n\n  constructor({\n    path = window.location.host,\n    ioOptions,\n    iceConfig,\n    logging = defaultLoggingOptions,\n  }: RTCModuleType) {\n    super();\n    this.log = logging.log ? console.log : () => {};\n    this.warn = logging.warn ? console.warn : () => {};\n    this.error = logging.error ? console.error : () => {};\n    this.socket = createSocket(ioOptions);\n    this.iceConfig = iceConfig;\n    this._streams = {};\n    this.user = {};\n    this.isOriginator = false;\n    this.connectReady = false;\n    this.inCall = false;\n    this.isSetup = false;\n    this.log(\"client > rtc launched..\", { path, ioOptions, iceConfig });\n  }\n\n  // setup will setup and print any missing required options\n  setup({ name, gridId }: { name: string; gridId: string }) {\n    this.log(\"client > setup starting..\");\n    let videoGrid = null;\n\n    try {\n      if (!window) {\n        console.log(\"Note: window object is not detected.\");\n      } else {\n        videoGrid = document.getElementById(gridId);\n      }\n\n      if (!videoGrid && window) {\n        throw new Error(`Element with id '${gridId}' is required.`);\n      }\n\n      if (!name) {\n        throw new Error(\n          `\"name\" is required in \"rtc.setup({ name: 'name', gridId: 'id' })\".`\n        );\n      }\n\n      if (!gridId) {\n        throw new Error(\n          `\"gridId\" is required in \"rtc.setup({ name: 'name', gridId: 'id' })\".`\n        );\n      }\n\n      this.user.name = name;\n      this.isSetup = true;\n      this.log(\"client > rtc setup successful!\");\n    } catch (err: Error | any) {\n      this.error(\"rtc setup failed.\", err.message);\n    }\n  }\n\n  // get stream ready\n  async getMyStream() {\n    if (!this.isSetup) {\n      throw new Error(\n        'RTC module is not setup. Have you called \"rtc.setup()\"?'\n      );\n    }\n\n    return navigator.mediaDevices\n      .getUserMedia({ audio: false, video: true })\n      .then((stream) => {\n        this.log(\"client > media stream ready.\");\n        return (this._localStream = stream);\n      });\n  }\n\n  // initialize listeners\n  startListeners() {\n    this._establishSocketListeners();\n    this.log(\"client > rtc listeners activated.\");\n  }\n\n  // establish socket listeners\n  private _establishSocketListeners() {\n    // if already connected, disconnect to start new connection\n    if (!this.socket.connected) this.socket.disconnect();\n    // initial connect\n    this.socket.connect();\n    // listen for connection confirmation\n    this.socket.on(\"connect\", this._socketEvents.connect.bind(this));\n    // logger event\n    this.socket.on(\"log\", this._socketEvents.log.bind(this));\n    // created room event\n    this.socket.on(\"created\", this._socketEvents.created.bind(this));\n    // joined room event\n    this.socket.on(\"joined\", this._socketEvents.joined.bind(this));\n    // join room event\n    this.socket.on(\"join\", this._socketEvents.join.bind(this));\n    // signal message event\n    this.socket.on(\"message\", this._socketEvents.message.bind(this));\n    // room ready event\n    this.socket.on(\"ready\", this._socketEvents.ready.bind(this));\n    // stream ready event\n    this.socket.on(\"stream\", this._socketEvents.stream.bind(this));\n  }\n\n  // socket listener events\n  private _socketEvents = {\n    log: (event: [message?: any, ...optionalParams: any[]]) => {\n      this.log.apply(console, event);\n    },\n    connect: () => {\n      this.log(\"client > websockets ready.\");\n      this.emit(\"connect\");\n      return this;\n    },\n    created: (event: { id: string | undefined; room: string | undefined }) => {\n      this._myId = event.id;\n      this.room = event.room;\n      this.isOriginator = true;\n      this._isAdmin = true;\n\n      this.log(\"Created room:\", { event });\n      this.emit(\"created\", event);\n    },\n    joined: (event: {\n      id: string | undefined;\n      room: string | undefined;\n      user: any;\n    }) => {\n      this._myId = event.id;\n      this.room = event.room;\n      this.connectReady = true;\n      this.log(\"Joined room:\", { event });\n      this.emit(\"joined\", event);\n    },\n    join: () => {\n      this.connectReady = true;\n\n      this.emit(\"newJoin\", { newJoin: true });\n    },\n    message: (event: {\n      id: any;\n      type: string;\n      sdp: RTCSessionDescriptionInit;\n      candidate: RTCIceCandidateInit | undefined;\n    }) => {\n      const socketId = event.id;\n\n      if (event.type === \"left\") {\n        this.log(socketId, \"has left the call.\", { event });\n\n        this._removePeer(socketId);\n        this.isOriginator = true;\n\n        this.emit(\"userLeave\", { id: socketId });\n        return;\n      }\n\n      // prevent duplicate connection attempts\n      if (\n        this._peers[socketId] &&\n        this._peers[socketId].connectionState === \"connected\"\n      ) {\n        this.log(\"Connection with\", socketId, \"is already established\", {\n          peersEstablished: this._peers,\n        });\n        return;\n      }\n\n      switch (event.type) {\n        case \"stream-ready\":\n          this._connectPeer(socketId);\n          this.log(\n            \"client -> stream is ready, creating peer, adding stream, and making offer:\",\n            {\n              myId: this._myId,\n              theirId: socketId,\n              streams: this._streams,\n              connections: this._peers,\n            }\n          );\n          return;\n        case \"offer\":\n          if (!this._peers[socketId]) {\n            this._connectPeer(socketId);\n          }\n          this._peers[socketId].setRemoteDescription(\n            new RTCSessionDescription(event.sdp)\n          );\n          this._rtcEvents.makeAnswer(socketId);\n          return;\n        case \"answer\":\n          this._peers[socketId].setRemoteDescription(\n            new RTCSessionDescription(event.sdp)\n          );\n          return;\n        case \"candidate\":\n          if (!event?.candidate) {\n            return this.error(\"Client is missing event candidate.\");\n          }\n          this.inCall = true;\n          const candidate = new RTCIceCandidate(event.candidate);\n          this._peers[socketId].addIceCandidate(candidate);\n          return;\n        default:\n          return;\n      }\n    },\n    ready: (event: { id: string | undefined }) => {\n      if (event.id !== this._myId) this.isOriginator = true;\n    },\n    stream() {\n      console.log(\"TODO socket stream event!\");\n    },\n  };\n\n  private _rtcEvents = {\n    makeOffer: (socketId: string) => {\n      this.log(\"Making offer:\", { peer: this._peers[socketId] });\n\n      this._peers[socketId]\n        .createOffer()\n        .then(\n          this._rtcEvents.sendLocalDescription.bind(this, socketId),\n          this._rtcEvents.createOfferError\n        );\n    },\n    makeAnswer: (socketId: string) => {\n      this.log(\"Sending answer:\", { peer: this._peers[socketId] });\n\n      this._peers[socketId]\n        .createAnswer()\n        .then(\n          this._rtcEvents.sendLocalDescription.bind(this, socketId),\n          this._rtcEvents.sdpError\n        );\n    },\n    sendLocalDescription: async (socketId: string, sessionDescription: any) => {\n      try {\n        await this._peers[socketId].setLocalDescription(sessionDescription);\n        this._sendMessage({\n          toId: socketId,\n          name: this.user.name,\n          room: this.room,\n          sdp: sessionDescription,\n          type: sessionDescription.type,\n        });\n      } catch (e) {\n        if (this._peers[socketId].connectionState !== \"new\") {\n          this.error(\"Failed to setLocalDescription\", {\n            state: this._peers[socketId].connectionState,\n            peer: this._peers[socketId],\n            peers: this._peers,\n          });\n        }\n      }\n    },\n    addTrack: (socketId: string, event: { streams: MediaStream[] }) => {\n      this.log(\"Remote stream added for \", this._peers[socketId]);\n\n      if (this._streams[socketId]?.id !== event.streams[0].id) {\n        this._streams[socketId] = event.streams[0];\n\n        this.emit(\"stream\", {\n          id: socketId,\n          stream: event.streams[0],\n        });\n        this.socket.emit(\"stream\", {\n          id: socketId,\n          stream: event.streams[0],\n        });\n      }\n    },\n    removeTrack: (socketId: string, event: { streams: MediaStream[] }) => {\n      this.isOriginator = false;\n      this._removePeer(socketId);\n\n      this.emit(\"left\", {\n        id: socketId,\n        stream: event.streams[0],\n      });\n    },\n    iceCandidate: (socketId: string, event: RTCIceCandidate) => {\n      if (event.candidate) {\n        this._sendMessage({\n          toId: socketId,\n          name: this.user.name,\n          room: this.room,\n          candidate: event.candidate,\n          type: \"candidate\",\n        });\n      }\n    },\n    stateChange: (socketId: string, event: RTCSignalingState) => {\n      const connectionState: RTCPeerConnectionState =\n        this._peers[socketId].connectionState;\n      this.log(\"RTC state change:\", connectionState);\n      if (connectionState === \"disconnected\" || connectionState === \"failed\") {\n        this.emit(\"left\", {\n          id: socketId,\n        });\n      }\n    },\n    sdpError: (error: RTCError) => {\n      this.log(\"Session description error: \" + error.toString());\n\n      this.emit(\"error\", {\n        error: new Error(`Session description error: ${error.toString()}`),\n      });\n    },\n    createOfferError: () => {\n      this.error(\"ERROR creating offer\");\n\n      this.emit(\"error\", {\n        error: new Error(\"Error while creating an offer\"),\n      });\n    },\n  };\n\n  private async _createPeer(socketId: string) {\n    try {\n      if (this._peers[socketId]) {\n        // do not create peer if connection is already established\n        this.warn(\"You're already connected with:\", socketId);\n        return;\n      }\n\n      this._peers[socketId] = new RTCPeerConnection(\n        this.iceConfig as RTCConfiguration\n      );\n      this._peers[socketId].onicecandidate = this._rtcEvents.iceCandidate.bind(\n        this,\n        socketId\n      );\n      this._peers[socketId].ontrack = this._rtcEvents.addTrack.bind(\n        this,\n        socketId\n      );\n      this._peers[socketId].onremovetrack = this._rtcEvents.removeTrack.bind(\n        this,\n        socketId\n      );\n      this._peers[socketId].onconnectionstatechange =\n        this._rtcEvents.stateChange.bind(this, socketId);\n\n      this.log(\"Created RTC Peer for:\", { socketId, peers: this._peers });\n    } catch (error: any) {\n      this.error(\"RTC Peer failed: \" + error.message);\n\n      this.emit(\"error\", {\n        error: new Error(`RTC Peer failed: ${error.message}`),\n      });\n    }\n  }\n\n  // connect rtc peer connection\n  private _connectPeer(socketId: string) {\n    if (!socketId) {\n      throw new Error(\"_connectPeer requires socket id.\");\n    }\n\n    if (this._localStream === undefined && !this.connectReady) {\n      return this.warn(\"This remote peer is not ready for connection.\", {\n        ready: this.connectReady,\n        localStream: this._localStream,\n        id: socketId,\n      });\n    }\n\n    this._createPeer(socketId);\n    this._peers[socketId].addStream(this._localStream);\n\n    if (this.isOriginator) {\n      this.log(\"client > you are the host.\");\n      this.log(\"client > creating offer:\", socketId);\n\n      this._rtcEvents.makeOffer(socketId);\n    } else {\n      this.log(\"client > you are the agent.\");\n    }\n  }\n\n  private _removePeer(socketId: string) {\n    if (!socketId) {\n      this._peers.forEach((peer: any, index: number) => {\n        this.log(\"Closing peer connection:\", { id: socketId, peer });\n        peer.close();\n        delete this._peers[index];\n      });\n      this._streams = {};\n    } else {\n      if (!this._peers[socketId]) return;\n      this._peers[socketId].close();\n      delete this._peers[socketId];\n      delete this._peers[socketId];\n    }\n\n    this.emit(\"left\", { id: socketId });\n  }\n\n  // server event emitter\n  private _sendMessage(event: any) {\n    setTimeout(() => {\n      this.socket.emit(\"message\", { ...event, id: event.id });\n    }, 0);\n  }\n\n  // public method: join room\n  joinRoom(name: string, room: string) {\n    if (this.room) {\n      return this.warn(\"You are currently in a room.\");\n    }\n\n    if (!room) {\n      return this.error(\"Room name was not provided to join.\");\n    }\n\n    // create room\n    this.user.name = name;\n    this.log(\"client > create or join\", { name: this.user.name, room });\n    this.socket.emit(\"create or join\", {\n      user: this.user,\n      name: this.user.name,\n      room,\n    });\n  }\n\n  // public method: leave room\n  leaveRoom(room: string) {\n    // leave room\n    this.log(\"leaving room\", { name: this.user.name, room });\n\n    this.isOriginator = false;\n    this._sendMessage({ type: \"left\", user: this.user });\n  }\n\n  // public method: sends message to server\n  // broadcasting stream is ready\n  sendStreamReady() {\n    if (this.room) {\n      this._sendMessage({ type: \"stream-ready\", room: this.room });\n    } else {\n      this.warn(\"You need to join a room before streaming.\");\n    }\n  }\n\n  stopListeners() {\n    this.removeAllListeners();\n    this.socket.removeAllListeners();\n    if (this._myId) {\n      this._peers[this._myId as string]?.close();\n      this._localStream?.getTracks().forEach((track) => track.stop());\n      removeVideoElement({ id: this._myId });\n      this.log(\"Destroyed RTC session.\");\n    }\n  }\n}\n\nexport default RTCModule;\n"],"names":["removeVideoElement","id","defaultSocketOptions","defaultLoggingOptions","createSocket","overrideOptions","io","RTCModule","EventEmitter","path","ioOptions","iceConfig","logging","event","socketId","candidate","sessionDescription","connectionState","error","name","gridId","videoGrid","err","stream","peer","index","room","track"],"mappings":"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"}