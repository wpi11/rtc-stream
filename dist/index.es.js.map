{"version":3,"file":"index.es.js","sources":["../src/utils/removeVideoElement.tsx","../src/modules/WRTC-Stream.ts"],"sourcesContent":["export const removeVideoElement = ({ id }: { id: string | undefined }) => {\n  const videoEl = document.getElementById(`vid_${id}`);\n  videoEl?.remove();\n};\n","// import { Socket } from 'socket.io-client';\nimport { IceConfig } from \"../config/iceConfig\";\nimport { IPeers, IStreams, ILogs } from \"../types/EventsManager.types\";\nimport EventEmitter from \"eventemitter3\";\nimport { removeVideoElement } from \"../utils/removeVideoElement\";\nimport { Socket } from \"socket.io-client\";\n\nclass StreamService extends EventEmitter {\n  private peers: IPeers = {};\n  private streams: IStreams;\n  private _localStream: MediaStream | undefined;\n  private _myId: string | undefined;\n  private _isAdmin: boolean | undefined;\n  log: ILogs[\"log\"];\n  warn: ILogs[\"warn\"];\n  error: ILogs[\"error\"];\n  user: { name?: string };\n  room: string | undefined;\n  socket: Socket;\n  pcConfig: IceConfig;\n  connectReady: boolean;\n  isOriginator: boolean;\n  inCall: boolean;\n\n  constructor({\n    socket,\n    pcConfig,\n    logging = { log: true, warn: true, error: true },\n  }: {\n    socket: any;\n    pcConfig: IceConfig;\n    logging: { log?: boolean; warn?: boolean; error?: boolean };\n  }) {\n    super();\n    this.log = logging.log ? console.log : () => {};\n    this.warn = logging.warn ? console.warn : () => {};\n    this.error = logging.error ? console.error : () => {};\n    this.socket = socket;\n    this.pcConfig = pcConfig as IceConfig;\n    this.streams = {};\n    this.user = {};\n    this.isOriginator = false;\n    this.connectReady = false;\n    this.inCall = false;\n  }\n\n  // get stream ready\n  async getMyStream({ name, gridId }: { name: string; gridId: string }) {\n    const videoGrid = document.getElementById(gridId);\n\n    if (!name) {\n      throw new Error(`Video name in stream options is required.`);\n    }\n\n    if (!gridId) {\n      throw new Error(`Video gridId in stream options is required.`);\n    }\n\n    if (!videoGrid) {\n      throw new Error(`Element with id '${gridId}' is required.`);\n    }\n\n    return navigator.mediaDevices\n      .getUserMedia({ audio: false, video: true })\n      .then((stream) => {\n        this.log(\"Media stream ready.\");\n        this.user.name = name;\n        return (this._localStream = stream);\n      });\n  }\n\n  // initialize listeners\n  startListeners() {\n    this._establishSocketListeners();\n  }\n\n  // establish socket listeners\n  private _establishSocketListeners() {\n    // initial connect\n    // if (!this.socket.connected)\n    this.socket.disconnect();\n    this.socket.connect();\n    // listen for connection confirmation\n    this.socket.on(\"connect\", this._socketEvents.connect.bind(this));\n    // logger event\n    this.socket.on(\"log\", this._socketEvents.log.bind(this));\n    // created room event\n    this.socket.on(\"created\", this._socketEvents.created.bind(this));\n    // joined room event\n    this.socket.on(\"joined\", this._socketEvents.joined.bind(this));\n    // join room event\n    this.socket.on(\"join\", this._socketEvents.join.bind(this));\n    // signal message event\n    this.socket.on(\"message\", this._socketEvents.message.bind(this));\n    // room ready event\n    this.socket.on(\"ready\", this._socketEvents.ready.bind(this));\n    // stream ready event\n    this.socket.on(\"stream\", this._socketEvents.stream.bind(this));\n  }\n\n  // socket listener events\n  private _socketEvents = {\n    log: (event: [message?: any, ...optionalParams: any[]]) => {\n      this.log.apply(console, event);\n    },\n    connect: () => {\n      this.log(\"RTC sockets ready.\");\n      return this;\n    },\n    created: (event: { id: string | undefined; room: string | undefined }) => {\n      this._myId = event.id;\n      this.room = event.room;\n      this.isOriginator = true;\n      this._isAdmin = true;\n\n      this.log(\"Created room:\", { event });\n      this.emit(\"created\", event);\n    },\n    joined: (event: {\n      id: string | undefined;\n      room: string | undefined;\n      user: any;\n    }) => {\n      this._myId = event.id;\n      this.room = event.room;\n      this.connectReady = true;\n      this.log(\"Joined room:\", { event });\n      this.emit(\"joined\", event);\n    },\n    join: () => {\n      this.connectReady = true;\n\n      this.emit(\"newJoin\", { newJoin: true });\n    },\n    message: (event: {\n      id: any;\n      type: string;\n      sdp: RTCSessionDescriptionInit;\n      candidate: RTCIceCandidateInit | undefined;\n    }) => {\n      const socketId = event.id;\n\n      if (event.type === \"left\") {\n        this.log(socketId, \"has left the call.\", { event });\n\n        this._removePeer(socketId);\n        this.isOriginator = true;\n\n        this.emit(\"userLeave\", { id: socketId });\n        return;\n      }\n\n      // prevent duplicate connection attempts\n      if (\n        this.peers[socketId] &&\n        this.peers[socketId].connectionState === \"connected\"\n      ) {\n        this.log(\"Connection with\", socketId, \"is already established\", {\n          peersEstablished: this.peers,\n        });\n        return;\n      }\n\n      switch (event.type) {\n        case \"stream-ready\":\n          this._connectPeer(socketId);\n          this.log(\n            \"Client -> Incoming stream, creating peer, adding stream, and making offer:\",\n            {\n              myId: this._myId,\n              theirId: socketId,\n              streams: this.streams,\n              connections: this.peers,\n            }\n          );\n          return;\n        case \"offer\":\n          if (!this.peers[socketId]) {\n            this._connectPeer(socketId);\n          }\n          this.peers[socketId].setRemoteDescription(\n            new RTCSessionDescription(event.sdp)\n          );\n          this._rtcEvents.makeAnswer(socketId);\n          return;\n        case \"answer\":\n          this.peers[socketId].setRemoteDescription(\n            new RTCSessionDescription(event.sdp)\n          );\n          return;\n        case \"candidate\":\n          if (!event?.candidate) {\n            return this.error(\"Client is missing event candidate.\");\n          }\n          this.inCall = true;\n          const candidate = new RTCIceCandidate(event.candidate);\n          this.peers[socketId].addIceCandidate(candidate);\n          return;\n        default:\n          return;\n      }\n    },\n    ready: (event: { id: string | undefined }) => {\n      if (event.id !== this._myId) this.isOriginator = true;\n    },\n    stream() {\n      console.log(\"TODO socket stream event!\");\n    },\n  };\n\n  private _rtcEvents = {\n    makeOffer: (socketId: string) => {\n      this.log(\"Making offer:\", { peer: this.peers[socketId] });\n\n      this.peers[socketId]\n        .createOffer()\n        .then(\n          this._rtcEvents.sendLocalDescription.bind(this, socketId),\n          this._rtcEvents.createOfferError\n        );\n    },\n    makeAnswer: (socketId: string) => {\n      this.log(\"Sending answer:\", { peer: this.peers[socketId] });\n\n      this.peers[socketId]\n        .createAnswer()\n        .then(\n          this._rtcEvents.sendLocalDescription.bind(this, socketId),\n          this._rtcEvents.sdpError\n        );\n    },\n    sendLocalDescription: async (socketId: string, sessionDescription: any) => {\n      try {\n        await this.peers[socketId].setLocalDescription(sessionDescription);\n        this._sendMessage({\n          toId: socketId,\n          name: this.user.name,\n          room: this.room,\n          sdp: sessionDescription,\n          type: sessionDescription.type,\n        });\n      } catch (e) {\n        if (this.peers[socketId].connectionState !== \"new\") {\n          this.error(\"Failed to setLocalDescription\", {\n            state: this.peers[socketId].connectionState,\n            peer: this.peers[socketId],\n            peers: this.peers,\n          });\n        }\n      }\n    },\n    addTrack: (socketId: string, event: { streams: MediaStream[] }) => {\n      this.log(\"Remote stream added for \", this.peers[socketId]);\n\n      if (this.streams[socketId]?.id !== event.streams[0].id) {\n        this.streams[socketId] = event.streams[0];\n\n        this.emit(\"stream\", {\n          id: socketId,\n          stream: event.streams[0],\n        });\n        this.socket.emit(\"stream\", {\n          id: socketId,\n          stream: event.streams[0],\n        });\n      }\n    },\n    removeTrack: (socketId: string, event: { streams: MediaStream[] }) => {\n      this.isOriginator = false;\n      this._removePeer(socketId);\n\n      this.emit(\"left\", {\n        id: socketId,\n        stream: event.streams[0],\n      });\n    },\n    iceCandidate: (socketId: string, event: RTCIceCandidate) => {\n      if (event.candidate) {\n        this._sendMessage({\n          toId: socketId,\n          name: this.user.name,\n          room: this.room,\n          candidate: event.candidate,\n          type: \"candidate\",\n        });\n      }\n    },\n    stateChange: (socketId: string, event: RTCSignalingState) => {\n      const connectionState: RTCPeerConnectionState =\n        this.peers[socketId].connectionState;\n      this.log(\"RTC state change:\", connectionState);\n      if (connectionState === \"disconnected\" || connectionState === \"failed\") {\n        this.emit(\"left\", {\n          id: socketId,\n        });\n      }\n    },\n    sdpError: (error: RTCError) => {\n      this.log(\"Session description error: \" + error.toString());\n\n      this.emit(\"error\", {\n        error: new Error(`Session description error: ${error.toString()}`),\n      });\n    },\n    createOfferError: () => {\n      this.error(\"ERROR creating offer\");\n\n      this.emit(\"error\", {\n        error: new Error(\"Error while creating an offer\"),\n      });\n    },\n  };\n\n  private async _createPeer(socketId: string) {\n    try {\n      if (this.peers[socketId]) {\n        // do not create peer if connection is already established\n        this.warn(\"You're already connected with:\", socketId);\n        return;\n      }\n\n      this.peers[socketId] = new RTCPeerConnection(\n        this.pcConfig as RTCConfiguration\n      );\n      this.peers[socketId].onicecandidate = this._rtcEvents.iceCandidate.bind(\n        this,\n        socketId\n      );\n      this.peers[socketId].ontrack = this._rtcEvents.addTrack.bind(\n        this,\n        socketId\n      );\n      this.peers[socketId].onremovetrack = this._rtcEvents.removeTrack.bind(\n        this,\n        socketId\n      );\n      this.peers[socketId].onconnectionstatechange =\n        this._rtcEvents.stateChange.bind(this, socketId);\n\n      this.log(\"Created RTC Peer for:\", { socketId, peers: this.peers });\n    } catch (error: any) {\n      this.error(\"RTC Peer failed: \" + error.message);\n\n      this.emit(\"error\", {\n        error: new Error(`RTC Peer failed: ${error.message}`),\n      });\n    }\n  }\n\n  // connect rtc peer connection\n  private _connectPeer(socketId: string) {\n    if (this._localStream === undefined && !this.connectReady) {\n      return this.warn(\"This remote peer is not ready for connection.\", {\n        ready: this.connectReady,\n        localStream: this._localStream,\n        id: socketId,\n      });\n    }\n\n    this._createPeer(socketId);\n    this.peers[socketId].addStream(this._localStream);\n\n    if (this.isOriginator) {\n      this.log(\"FYI - You initiated this call.\");\n      this.log(\"Creating offer for:\", socketId);\n\n      this._rtcEvents.makeOffer(socketId);\n    } else {\n      this.log(\"FYI - You received this call.\");\n    }\n  }\n\n  private _removePeer(socketId: string) {\n    if (!socketId) {\n      this.peers.forEach((peer: any, index: number) => {\n        this.log(\"Closing peer connection:\", { id: socketId, peer });\n        peer.close();\n        delete this.peers[index];\n      });\n      this.streams = {};\n    } else {\n      if (!this.peers[socketId]) return;\n      this.peers[socketId].close();\n      delete this.peers[socketId];\n      delete this.streams[socketId];\n    }\n\n    this.emit(\"left\", { id: socketId });\n  }\n\n  // server event emitter\n  private _sendMessage(event: any) {\n    setTimeout(() => {\n      this.socket.emit(\"message\", { ...event, id: event.id });\n    }, 0);\n  }\n\n  // public method: join room\n  joinRoom(name: string, room: string) {\n    if (this.room) {\n      return this.warn(\"You are currently in a room.\");\n    }\n\n    if (!room) {\n      return this.error(\"Room name was not provided to join.\");\n    }\n\n    // create room\n    this.user.name = name;\n    this.log(\"create or join\", { name: this.user.name, room });\n    this.socket.emit(\"create or join\", {\n      user: this.user,\n      name: this.user.name,\n      room,\n    });\n  }\n\n  // public method: leave room\n  leaveRoom(room: string) {\n    // leave room\n    this.log(\"leaving room\", { name: this.user.name, room });\n\n    this.isOriginator = false;\n    this._sendMessage({ type: \"left\", user: this.user });\n  }\n\n  // public method: sends message to server\n  // broadcasting stream is ready\n  sendStreamReady() {\n    if (this.room) {\n      this._sendMessage({ type: \"stream-ready\", room: this.room });\n    } else {\n      this.warn(\"You need to join a room before streaming.\");\n    }\n  }\n\n  stopListeners() {\n    this.removeAllListeners();\n    this.socket.removeAllListeners();\n    if (this._myId) {\n      this.peers[this._myId as string]?.close();\n      this._localStream?.getTracks().forEach((track) => track.stop());\n      removeVideoElement({ id: this._myId });\n      this.log(\"Destroyed RTC session.\");\n    }\n  }\n}\n\nexport default StreamService;\n"],"names":["removeVideoElement","id","StreamService","EventEmitter","socket","pcConfig","logging","event","socketId","candidate","sessionDescription","connectionState","error","name","gridId","videoGrid","stream","peer","index","room","track"],"mappings":"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"}