{"version":3,"file":"index.es.js","sources":["../src/utils/removeVideoElement.tsx","../src/module/RTCModule.ts"],"sourcesContent":["export const removeVideoElement = ({ id }: { id: string | undefined }) => {\n  const videoEl = document.getElementById(`vid_${id}`);\n  videoEl?.remove();\n};\n","import io, { Socket, ManagerOptions } from \"socket.io-client\";\nimport EventEmitter from \"eventemitter3\";\nimport { IPeers, IStreams, ILogs } from \"../types/rtc-module.types\";\nimport { removeVideoElement } from \"../utils/removeVideoElement\";\n\ninterface RTCModuleType {\n  /**\n   * Server path uri\n   */\n  path: string;\n  /**\n   * Socket.io config override\n   */\n  ioOptions?: ManagerOptions;\n  /**\n   * WebRTC ICE configuration\n   */\n  iceConfig: RTCConfiguration;\n  /**\n   * RTCModule logging\n   */\n  logging?: {\n    log: boolean;\n    warn: boolean;\n    error: boolean;\n  };\n}\n\nconst defaultSocketOptions: Partial<ManagerOptions> = {\n  transports: [\"polling\", \"websocket\"],\n};\n\nconst defaultLoggingOptions = {\n  log: true,\n  warn: true,\n  error: true,\n};\n\n/**\n * @package WTRC-Stream\n * @param socket {Object} - A Socket is the fundamental class for interacting with the server.\n * @param iceConfig {string} -\n */\nclass RTCModule extends EventEmitter {\n  private _peers: IPeers = {};\n  private _streams: IStreams;\n  private _localStream: MediaStream | undefined;\n  private _myId: string | undefined;\n  private _isAdmin: boolean | undefined;\n  log: ILogs[\"log\"];\n  warn: ILogs[\"warn\"];\n  error: ILogs[\"error\"];\n  user: { name?: string };\n  room: string | undefined;\n  socket: Socket;\n  iceConfig: RTCConfiguration;\n  connectReady: boolean;\n  isOriginator: boolean;\n  inCall: boolean;\n  isSetup: boolean;\n\n  constructor({\n    path,\n    ioOptions,\n    iceConfig,\n    logging = defaultLoggingOptions,\n  }: RTCModuleType) {\n    super();\n    this.log = logging.log ? console.log : () => {};\n    this.warn = logging.warn ? console.warn : () => {};\n    this.error = logging.error ? console.error : () => {};\n    this.socket = io(path, { ...defaultSocketOptions, ...ioOptions });\n    this.iceConfig = iceConfig;\n    this._streams = {};\n    this.user = {};\n    this.isOriginator = false;\n    this.connectReady = false;\n    this.inCall = false;\n    this.isSetup = false;\n  }\n\n  // setup will setup and print any missing required options\n  setup({ name, gridId }: { name: string; gridId: string }) {\n    let videoGrid = null;\n\n    try {\n      if (!window) {\n        console.log(\"Note: window object is not detected.\");\n      } else {\n        videoGrid = document.getElementById(gridId);\n      }\n\n      if (!videoGrid && window) {\n        throw new Error(`Element with id '${gridId}' is required.`);\n      }\n\n      if (!name) {\n        throw new Error(\n          `\"name\" is required in \"rtc.setup({ name: 'name', gridId: 'id' })\".`\n        );\n      }\n\n      if (!gridId) {\n        throw new Error(\n          `\"gridId\" is required in \"rtc.setup({ name: 'name', gridId: 'id' })\".`\n        );\n      }\n\n      this.user.name = name;\n      this.isSetup = true;\n    } catch (err: Error | any) {\n      console.error(\"setup failed.\", err.message);\n    }\n  }\n\n  // get stream ready\n  async getMyStream() {\n    if (!this.isSetup) {\n      throw new Error(\n        'RTC module is not setup. Have you called \"rtc.setup()\"?'\n      );\n    }\n\n    return navigator.mediaDevices\n      .getUserMedia({ audio: false, video: true })\n      .then((stream) => {\n        this.log(\"Media stream ready.\");\n        return (this._localStream = stream);\n      });\n  }\n\n  // initialize listeners\n  startListeners() {\n    this._establishSocketListeners();\n  }\n\n  // establish socket listeners\n  private _establishSocketListeners() {\n    // initial connect\n    // if (!this.socket.connected)\n    this.socket.disconnect();\n    this.socket.connect();\n    // listen for connection confirmation\n    this.socket.on(\"connect\", this._socketEvents.connect.bind(this));\n    // logger event\n    this.socket.on(\"log\", this._socketEvents.log.bind(this));\n    // created room event\n    this.socket.on(\"created\", this._socketEvents.created.bind(this));\n    // joined room event\n    this.socket.on(\"joined\", this._socketEvents.joined.bind(this));\n    // join room event\n    this.socket.on(\"join\", this._socketEvents.join.bind(this));\n    // signal message event\n    this.socket.on(\"message\", this._socketEvents.message.bind(this));\n    // room ready event\n    this.socket.on(\"ready\", this._socketEvents.ready.bind(this));\n    // stream ready event\n    this.socket.on(\"stream\", this._socketEvents.stream.bind(this));\n  }\n\n  // socket listener events\n  private _socketEvents = {\n    log: (event: [message?: any, ...optionalParams: any[]]) => {\n      this.log.apply(console, event);\n    },\n    connect: () => {\n      this.log(\"RTC sockets ready.\");\n      return this;\n    },\n    created: (event: { id: string | undefined; room: string | undefined }) => {\n      this._myId = event.id;\n      this.room = event.room;\n      this.isOriginator = true;\n      this._isAdmin = true;\n\n      this.log(\"Created room:\", { event });\n      this.emit(\"created\", event);\n    },\n    joined: (event: {\n      id: string | undefined;\n      room: string | undefined;\n      user: any;\n    }) => {\n      this._myId = event.id;\n      this.room = event.room;\n      this.connectReady = true;\n      this.log(\"Joined room:\", { event });\n      this.emit(\"joined\", event);\n    },\n    join: () => {\n      this.connectReady = true;\n\n      this.emit(\"newJoin\", { newJoin: true });\n    },\n    message: (event: {\n      id: any;\n      type: string;\n      sdp: RTCSessionDescriptionInit;\n      candidate: RTCIceCandidateInit | undefined;\n    }) => {\n      const socketId = event.id;\n\n      if (event.type === \"left\") {\n        this.log(socketId, \"has left the call.\", { event });\n\n        this._removePeer(socketId);\n        this.isOriginator = true;\n\n        this.emit(\"userLeave\", { id: socketId });\n        return;\n      }\n\n      // prevent duplicate connection attempts\n      if (\n        this._peers[socketId] &&\n        this._peers[socketId].connectionState === \"connected\"\n      ) {\n        this.log(\"Connection with\", socketId, \"is already established\", {\n          peersEstablished: this._peers,\n        });\n        return;\n      }\n\n      switch (event.type) {\n        case \"stream-ready\":\n          this._connectPeer(socketId);\n          this.log(\n            \"Client -> Incoming stream, creating peer, adding stream, and making offer:\",\n            {\n              myId: this._myId,\n              theirId: socketId,\n              streams: this._streams,\n              connections: this._peers,\n            }\n          );\n          return;\n        case \"offer\":\n          if (!this._peers[socketId]) {\n            this._connectPeer(socketId);\n          }\n          this._peers[socketId].setRemoteDescription(\n            new RTCSessionDescription(event.sdp)\n          );\n          this._rtcEvents.makeAnswer(socketId);\n          return;\n        case \"answer\":\n          this._peers[socketId].setRemoteDescription(\n            new RTCSessionDescription(event.sdp)\n          );\n          return;\n        case \"candidate\":\n          if (!event?.candidate) {\n            return this.error(\"Client is missing event candidate.\");\n          }\n          this.inCall = true;\n          const candidate = new RTCIceCandidate(event.candidate);\n          this._peers[socketId].addIceCandidate(candidate);\n          return;\n        default:\n          return;\n      }\n    },\n    ready: (event: { id: string | undefined }) => {\n      if (event.id !== this._myId) this.isOriginator = true;\n    },\n    stream() {\n      console.log(\"TODO socket stream event!\");\n    },\n  };\n\n  private _rtcEvents = {\n    makeOffer: (socketId: string) => {\n      this.log(\"Making offer:\", { peer: this._peers[socketId] });\n\n      this._peers[socketId]\n        .createOffer()\n        .then(\n          this._rtcEvents.sendLocalDescription.bind(this, socketId),\n          this._rtcEvents.createOfferError\n        );\n    },\n    makeAnswer: (socketId: string) => {\n      this.log(\"Sending answer:\", { peer: this._peers[socketId] });\n\n      this._peers[socketId]\n        .createAnswer()\n        .then(\n          this._rtcEvents.sendLocalDescription.bind(this, socketId),\n          this._rtcEvents.sdpError\n        );\n    },\n    sendLocalDescription: async (socketId: string, sessionDescription: any) => {\n      try {\n        await this._peers[socketId].setLocalDescription(sessionDescription);\n        this._sendMessage({\n          toId: socketId,\n          name: this.user.name,\n          room: this.room,\n          sdp: sessionDescription,\n          type: sessionDescription.type,\n        });\n      } catch (e) {\n        if (this._peers[socketId].connectionState !== \"new\") {\n          this.error(\"Failed to setLocalDescription\", {\n            state: this._peers[socketId].connectionState,\n            peer: this._peers[socketId],\n            peers: this._peers,\n          });\n        }\n      }\n    },\n    addTrack: (socketId: string, event: { streams: MediaStream[] }) => {\n      this.log(\"Remote stream added for \", this._peers[socketId]);\n\n      if (this._streams[socketId]?.id !== event.streams[0].id) {\n        this._streams[socketId] = event.streams[0];\n\n        this.emit(\"stream\", {\n          id: socketId,\n          stream: event.streams[0],\n        });\n        this.socket.emit(\"stream\", {\n          id: socketId,\n          stream: event.streams[0],\n        });\n      }\n    },\n    removeTrack: (socketId: string, event: { streams: MediaStream[] }) => {\n      this.isOriginator = false;\n      this._removePeer(socketId);\n\n      this.emit(\"left\", {\n        id: socketId,\n        stream: event.streams[0],\n      });\n    },\n    iceCandidate: (socketId: string, event: RTCIceCandidate) => {\n      if (event.candidate) {\n        this._sendMessage({\n          toId: socketId,\n          name: this.user.name,\n          room: this.room,\n          candidate: event.candidate,\n          type: \"candidate\",\n        });\n      }\n    },\n    stateChange: (socketId: string, event: RTCSignalingState) => {\n      const connectionState: RTCPeerConnectionState =\n        this._peers[socketId].connectionState;\n      this.log(\"RTC state change:\", connectionState);\n      if (connectionState === \"disconnected\" || connectionState === \"failed\") {\n        this.emit(\"left\", {\n          id: socketId,\n        });\n      }\n    },\n    sdpError: (error: RTCError) => {\n      this.log(\"Session description error: \" + error.toString());\n\n      this.emit(\"error\", {\n        error: new Error(`Session description error: ${error.toString()}`),\n      });\n    },\n    createOfferError: () => {\n      this.error(\"ERROR creating offer\");\n\n      this.emit(\"error\", {\n        error: new Error(\"Error while creating an offer\"),\n      });\n    },\n  };\n\n  private async _createPeer(socketId: string) {\n    try {\n      if (this._peers[socketId]) {\n        // do not create peer if connection is already established\n        this.warn(\"You're already connected with:\", socketId);\n        return;\n      }\n\n      this._peers[socketId] = new RTCPeerConnection(\n        this.iceConfig as RTCConfiguration\n      );\n      this._peers[socketId].onicecandidate = this._rtcEvents.iceCandidate.bind(\n        this,\n        socketId\n      );\n      this._peers[socketId].ontrack = this._rtcEvents.addTrack.bind(\n        this,\n        socketId\n      );\n      this._peers[socketId].onremovetrack = this._rtcEvents.removeTrack.bind(\n        this,\n        socketId\n      );\n      this._peers[socketId].onconnectionstatechange =\n        this._rtcEvents.stateChange.bind(this, socketId);\n\n      this.log(\"Created RTC Peer for:\", { socketId, peers: this._peers });\n    } catch (error: any) {\n      this.error(\"RTC Peer failed: \" + error.message);\n\n      this.emit(\"error\", {\n        error: new Error(`RTC Peer failed: ${error.message}`),\n      });\n    }\n  }\n\n  // connect rtc peer connection\n  private _connectPeer(socketId: string) {\n    if (!socketId) {\n      throw new Error(\"_connectPeer requires socket id.\");\n    }\n\n    if (this._localStream === undefined && !this.connectReady) {\n      return this.warn(\"This remote peer is not ready for connection.\", {\n        ready: this.connectReady,\n        localStream: this._localStream,\n        id: socketId,\n      });\n    }\n\n    this._createPeer(socketId);\n    this._peers[socketId].addStream(this._localStream);\n\n    if (this.isOriginator) {\n      this.log(\"FYI - You initiated this call.\");\n      this.log(\"Creating offer for:\", socketId);\n\n      this._rtcEvents.makeOffer(socketId);\n    } else {\n      this.log(\"FYI - You received this call.\");\n    }\n  }\n\n  private _removePeer(socketId: string) {\n    if (!socketId) {\n      this._peers.forEach((peer: any, index: number) => {\n        this.log(\"Closing peer connection:\", { id: socketId, peer });\n        peer.close();\n        delete this._peers[index];\n      });\n      this._streams = {};\n    } else {\n      if (!this._peers[socketId]) return;\n      this._peers[socketId].close();\n      delete this._peers[socketId];\n      delete this._peers[socketId];\n    }\n\n    this.emit(\"left\", { id: socketId });\n  }\n\n  // server event emitter\n  private _sendMessage(event: any) {\n    setTimeout(() => {\n      this.socket.emit(\"message\", { ...event, id: event.id });\n    }, 0);\n  }\n\n  // public method: join room\n  joinRoom(name: string, room: string) {\n    if (this.room) {\n      return this.warn(\"You are currently in a room.\");\n    }\n\n    if (!room) {\n      return this.error(\"Room name was not provided to join.\");\n    }\n\n    // create room\n    this.user.name = name;\n    this.log(\"create or join\", { name: this.user.name, room });\n    this.socket.emit(\"create or join\", {\n      user: this.user,\n      name: this.user.name,\n      room,\n    });\n  }\n\n  // public method: leave room\n  leaveRoom(room: string) {\n    // leave room\n    this.log(\"leaving room\", { name: this.user.name, room });\n\n    this.isOriginator = false;\n    this._sendMessage({ type: \"left\", user: this.user });\n  }\n\n  // public method: sends message to server\n  // broadcasting stream is ready\n  sendStreamReady() {\n    if (this.room) {\n      this._sendMessage({ type: \"stream-ready\", room: this.room });\n    } else {\n      this.warn(\"You need to join a room before streaming.\");\n    }\n  }\n\n  stopListeners() {\n    this.removeAllListeners();\n    this.socket.removeAllListeners();\n    if (this._myId) {\n      this._peers[this._myId as string]?.close();\n      this._localStream?.getTracks().forEach((track) => track.stop());\n      removeVideoElement({ id: this._myId });\n      this.log(\"Destroyed RTC session.\");\n    }\n  }\n}\n\nexport default RTCModule;\n"],"names":["removeVideoElement","id","defaultSocketOptions","defaultLoggingOptions","RTCModule","EventEmitter","path","ioOptions","iceConfig","logging","event","socketId","candidate","sessionDescription","connectionState","error","io","name","gridId","videoGrid","err","stream","peer","index","room","track"],"mappings":"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"}