{"version":3,"file":"index.es.js","sources":["../src/utils/removeVideoElement.tsx","../src/module/RTCModule.ts"],"sourcesContent":["export const removeVideoElement = ({ id }: { id: string | undefined }) => {\n  const videoEl = document.getElementById(`vid_${id}`);\n  videoEl?.remove();\n};\n","import io, { Socket, ManagerOptions } from 'socket.io-client';\nimport EventEmitter from 'eventemitter3';\nimport { IPeers, IStreams, ILogs } from '../types/rtc-module.types';\nimport { removeVideoElement } from '../utils/removeVideoElement';\n\nconst defaultSocketOptions: Partial<ManagerOptions> = {\n\tautoConnect: false,\n\treconnection: true,\n\treconnectionAttempts: 2,\n\treconnectionDelay: 10000,\n\ttransports: ['polling', 'websocket']\n};\n\nconst defaultLoggingOptions = {\n\tlog: true,\n\twarn: true,\n\terror: true\n};\n\n/**\n * Create socket.io instance.\n */\nconst createSocket = (overrideOptions?: Partial<ManagerOptions>) =>\n\tio(window.location.host, { ...defaultSocketOptions, ...overrideOptions });\n/**\n * RTCModule configuration types\n */\ninterface RTCModuleType {\n\t/**\n\t * Server path uri\n\t */\n\tpath: string;\n\t/**\n\t * Socket.io config override\n\t */\n\tioOptions?: ManagerOptions;\n\t/**\n\t * WebRTC ICE configuration\n\t */\n\ticeConfig: RTCConfiguration;\n\t/**\n\t * RTCModule logging\n\t */\n\tlogging?: {\n\t\tlog: boolean;\n\t\twarn: boolean;\n\t\terror: boolean;\n\t};\n}\n\n/**\n * @package RTCModule\n * @param path {string} - server url.\n * @param iceConfig {string} - WebRTC ICE configuration options\n */\nclass RTCModule extends EventEmitter {\n\tprivate _peers: IPeers = {};\n\tprivate _streams: IStreams;\n\tprivate _localStream: MediaStream | undefined;\n\tprivate _myId: string | undefined;\n\tprivate _isAdmin: boolean | undefined;\n\tlog: ILogs['log'];\n\twarn: ILogs['warn'];\n\terror: ILogs['error'];\n\tuser: { name?: string };\n\troom: string | undefined;\n\tsocket: Socket;\n\ticeConfig: RTCConfiguration;\n\tconnectReady: boolean;\n\tisOriginator: boolean;\n\tinCall: boolean;\n\tisSetup: boolean;\n\n\tconstructor({ path = window.location.host, ioOptions, iceConfig, logging = defaultLoggingOptions }: RTCModuleType) {\n\t\tsuper();\n\t\tthis.log = logging.log ? console.log : () => {};\n\t\tthis.warn = logging.warn ? console.warn : () => {};\n\t\tthis.error = logging.error ? console.error : () => {};\n\t\tthis.socket = createSocket(ioOptions);\n\t\tthis.iceConfig = iceConfig;\n\t\tthis._streams = {};\n\t\tthis.user = {};\n\t\tthis.isOriginator = false;\n\t\tthis.connectReady = false;\n\t\tthis.inCall = false;\n\t\tthis.isSetup = false;\n\t\tthis.log('client > rtc launched..', { path, ioOptions, iceConfig });\n\t}\n\n\t// setup will setup and print any missing required options\n\tsetup({ name, gridId }: { name: string; gridId: string }) {\n\t\tthis.log('client > setup starting..');\n\t\tlet videoGrid = null;\n\n\t\ttry {\n\t\t\tif (!window) {\n\t\t\t\tconsole.log('Note: window object is not detected.');\n\t\t\t} else {\n\t\t\t\tvideoGrid = document.getElementById(gridId);\n\t\t\t}\n\n\t\t\tif (!videoGrid && window) {\n\t\t\t\tthrow new Error(`Element with id '${gridId}' is required.`);\n\t\t\t}\n\n\t\t\tif (!name) {\n\t\t\t\tthrow new Error(`\"name\" is required in \"rtc.setup({ name: 'name', gridId: 'id' })\".`);\n\t\t\t}\n\n\t\t\tif (!gridId) {\n\t\t\t\tthrow new Error(`\"gridId\" is required in \"rtc.setup({ name: 'name', gridId: 'id' })\".`);\n\t\t\t}\n\n\t\t\tthis.user.name = name;\n\t\t\tthis.isSetup = true;\n\t\t\tthis.log('client > rtc setup successful!');\n\t\t} catch (err: Error | any) {\n\t\t\tthis.error('rtc setup failed.', err.message);\n\t\t}\n\t}\n\n\t// get stream ready\n\tasync getMyStream() {\n\t\tif (!this.isSetup) {\n\t\t\tthrow new Error('RTC module is not setup. Have you called \"rtc.setup()\"?');\n\t\t}\n\n\t\treturn navigator.mediaDevices.getUserMedia({ audio: false, video: true }).then((stream) => {\n\t\t\tthis.log('client > media stream ready.');\n\t\t\treturn (this._localStream = stream);\n\t\t});\n\t}\n\n\t// initialize listeners\n\tstartListeners() {\n\t\tthis._establishSocketListeners();\n\t\tthis.log('client > rtc listeners activated.');\n\t}\n\n\t// establish socket listeners\n\tprivate _establishSocketListeners() {\n\t\t// if already connected, disconnect to start new connection\n\t\tif (!this.socket.connected) this.socket.disconnect();\n\t\t// initial connect\n\t\tthis.socket.connect();\n\t\t// listen for connection confirmation\n\t\tthis.socket.on('connect', this._socketEvents.connect.bind(this));\n\t\t// logger event\n\t\tthis.socket.on('log', this._socketEvents.log.bind(this));\n\t\t// created room event\n\t\tthis.socket.on('created', this._socketEvents.created.bind(this));\n\t\t// joined room event\n\t\tthis.socket.on('joined', this._socketEvents.joined.bind(this));\n\t\t// join room event\n\t\tthis.socket.on('join', this._socketEvents.join.bind(this));\n\t\t// signal message event\n\t\tthis.socket.on('message', this._socketEvents.message.bind(this));\n\t\t// room ready event\n\t\tthis.socket.on('ready', this._socketEvents.ready.bind(this));\n\t\t// stream ready event\n\t\tthis.socket.on('stream', this._socketEvents.stream.bind(this));\n\t}\n\n\t// socket listener events\n\tprivate _socketEvents = {\n\t\tlog: (event: [message?: any, ...optionalParams: any[]]) => {\n\t\t\tthis.log.apply(console, event);\n\t\t},\n\t\tconnect: () => {\n\t\t\tthis.log('client > websockets ready.');\n\t\t\tthis.emit('connect');\n\t\t\treturn this;\n\t\t},\n\t\tcreated: (event: { id: string | undefined; room: string | undefined }) => {\n\t\t\tthis._myId = event.id;\n\t\t\tthis.room = event.room;\n\t\t\tthis.isOriginator = true;\n\t\t\tthis._isAdmin = true;\n\n\t\t\tthis.log('Created room:', { event });\n\t\t\tthis.emit('created', event);\n\t\t},\n\t\tjoined: (event: { id: string | undefined; room: string | undefined; user: any }) => {\n\t\t\tthis._myId = event.id;\n\t\t\tthis.room = event.room;\n\t\t\tthis.connectReady = true;\n\t\t\tthis.log('Joined room:', { event });\n\t\t\tthis.emit('joined', event);\n\t\t},\n\t\tjoin: () => {\n\t\t\tthis.connectReady = true;\n\n\t\t\tthis.emit('newJoin', { newJoin: true });\n\t\t},\n\t\tmessage: (event: {\n\t\t\tid: any;\n\t\t\ttype: string;\n\t\t\tsdp: RTCSessionDescriptionInit;\n\t\t\tcandidate: RTCIceCandidateInit | undefined;\n\t\t}) => {\n\t\t\tconst socketId = event.id;\n\n\t\t\tif (event.type === 'left') {\n\t\t\t\tthis.log(socketId, 'has left the call.', { event });\n\n\t\t\t\tthis._removePeer(socketId);\n\t\t\t\tthis.isOriginator = true;\n\n\t\t\t\tthis.emit('userLeave', { id: socketId });\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// prevent duplicate connection attempts\n\t\t\tif (this._peers[socketId] && this._peers[socketId].connectionState === 'connected') {\n\t\t\t\tthis.log('Connection with', socketId, 'is already established', {\n\t\t\t\t\tpeersEstablished: this._peers\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tswitch (event.type) {\n\t\t\t\tcase 'stream-ready':\n\t\t\t\t\tthis._connectPeer(socketId);\n\t\t\t\t\tthis.log('client -> stream is ready, creating peer, adding stream, and making offer:', {\n\t\t\t\t\t\tmyId: this._myId,\n\t\t\t\t\t\ttheirId: socketId,\n\t\t\t\t\t\tstreams: this._streams,\n\t\t\t\t\t\tconnections: this._peers\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\tcase 'offer':\n\t\t\t\t\tif (!this._peers[socketId]) {\n\t\t\t\t\t\tthis._connectPeer(socketId);\n\t\t\t\t\t}\n\t\t\t\t\tthis._peers[socketId].setRemoteDescription(new RTCSessionDescription(event.sdp));\n\t\t\t\t\tthis._rtcEvents.makeAnswer(socketId);\n\t\t\t\t\treturn;\n\t\t\t\tcase 'answer':\n\t\t\t\t\tthis._peers[socketId].setRemoteDescription(new RTCSessionDescription(event.sdp));\n\t\t\t\t\treturn;\n\t\t\t\tcase 'candidate':\n\t\t\t\t\tif (!event?.candidate) {\n\t\t\t\t\t\treturn this.error('Client is missing event candidate.');\n\t\t\t\t\t}\n\t\t\t\t\tthis.inCall = true;\n\t\t\t\t\tconst candidate = new RTCIceCandidate(event.candidate);\n\t\t\t\t\tthis._peers[socketId].addIceCandidate(candidate);\n\t\t\t\t\treturn;\n\t\t\t\tdefault:\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t},\n\t\tready: (event: { id: string | undefined }) => {\n\t\t\tif (event.id !== this._myId) this.isOriginator = true;\n\t\t},\n\t\tstream() {\n\t\t\tconsole.log('TODO socket stream event!');\n\t\t}\n\t};\n\n\tprivate _rtcEvents = {\n\t\tmakeOffer: (socketId: string) => {\n\t\t\tthis.log('Making offer:', { peer: this._peers[socketId] });\n\n\t\t\tthis._peers[socketId]\n\t\t\t\t.createOffer()\n\t\t\t\t.then(this._rtcEvents.sendLocalDescription.bind(this, socketId), this._rtcEvents.createOfferError);\n\t\t},\n\t\tmakeAnswer: (socketId: string) => {\n\t\t\tthis.log('Sending answer:', { peer: this._peers[socketId] });\n\n\t\t\tthis._peers[socketId]\n\t\t\t\t.createAnswer()\n\t\t\t\t.then(this._rtcEvents.sendLocalDescription.bind(this, socketId), this._rtcEvents.sdpError);\n\t\t},\n\t\tsendLocalDescription: async (socketId: string, sessionDescription: any) => {\n\t\t\ttry {\n\t\t\t\tawait this._peers[socketId].setLocalDescription(sessionDescription);\n\t\t\t\tthis._sendMessage({\n\t\t\t\t\ttoId: socketId,\n\t\t\t\t\tname: this.user.name,\n\t\t\t\t\troom: this.room,\n\t\t\t\t\tsdp: sessionDescription,\n\t\t\t\t\ttype: sessionDescription.type\n\t\t\t\t});\n\t\t\t} catch (e) {\n\t\t\t\tif (this._peers[socketId].connectionState !== 'new') {\n\t\t\t\t\tthis.error('Failed to setLocalDescription', {\n\t\t\t\t\t\tstate: this._peers[socketId].connectionState,\n\t\t\t\t\t\tpeer: this._peers[socketId],\n\t\t\t\t\t\tpeers: this._peers\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\taddTrack: (socketId: string, event: { streams: MediaStream[] }) => {\n\t\t\tthis.log('Remote stream added for ', this._peers[socketId]);\n\n\t\t\tif (this._streams[socketId]?.id !== event.streams[0].id) {\n\t\t\t\tthis._streams[socketId] = event.streams[0];\n\n\t\t\t\tthis.emit('stream', {\n\t\t\t\t\tid: socketId,\n\t\t\t\t\tstream: event.streams[0]\n\t\t\t\t});\n\t\t\t\tthis.socket.emit('stream', {\n\t\t\t\t\tid: socketId,\n\t\t\t\t\tstream: event.streams[0]\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\tremoveTrack: (socketId: string, event: { streams: MediaStream[] }) => {\n\t\t\tthis.isOriginator = false;\n\t\t\tthis._removePeer(socketId);\n\n\t\t\tthis.emit('left', {\n\t\t\t\tid: socketId,\n\t\t\t\tstream: event.streams[0]\n\t\t\t});\n\t\t},\n\t\ticeCandidate: (socketId: string, event: RTCIceCandidate) => {\n\t\t\tif (event.candidate) {\n\t\t\t\tthis._sendMessage({\n\t\t\t\t\ttoId: socketId,\n\t\t\t\t\tname: this.user.name,\n\t\t\t\t\troom: this.room,\n\t\t\t\t\tcandidate: event.candidate,\n\t\t\t\t\ttype: 'candidate'\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\tstateChange: (socketId: string, event: RTCSignalingState) => {\n\t\t\tconst connectionState: RTCPeerConnectionState = this._peers[socketId].connectionState;\n\t\t\tthis.log('RTC state change:', connectionState);\n\t\t\tif (connectionState === 'disconnected' || connectionState === 'failed') {\n\t\t\t\tthis.emit('left', {\n\t\t\t\t\tid: socketId\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\tsdpError: (error: RTCError) => {\n\t\t\tthis.log('Session description error: ' + error.toString());\n\n\t\t\tthis.emit('error', {\n\t\t\t\terror: new Error(`Session description error: ${error.toString()}`)\n\t\t\t});\n\t\t},\n\t\tcreateOfferError: () => {\n\t\t\tthis.error('ERROR creating offer');\n\n\t\t\tthis.emit('error', {\n\t\t\t\terror: new Error('Error while creating an offer')\n\t\t\t});\n\t\t}\n\t};\n\n\tprivate async _createPeer(socketId: string) {\n\t\ttry {\n\t\t\tif (this._peers[socketId]) {\n\t\t\t\t// do not create peer if connection is already established\n\t\t\t\tthis.warn(\"You're already connected with:\", socketId);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._peers[socketId] = new RTCPeerConnection(this.iceConfig as RTCConfiguration);\n\t\t\tthis._peers[socketId].onicecandidate = this._rtcEvents.iceCandidate.bind(this, socketId);\n\t\t\tthis._peers[socketId].ontrack = this._rtcEvents.addTrack.bind(this, socketId);\n\t\t\tthis._peers[socketId].onremovetrack = this._rtcEvents.removeTrack.bind(this, socketId);\n\t\t\tthis._peers[socketId].onconnectionstatechange = this._rtcEvents.stateChange.bind(this, socketId);\n\n\t\t\tthis.log('Created RTC Peer for:', { socketId, peers: this._peers });\n\t\t} catch (error: any) {\n\t\t\tthis.error('RTC Peer failed: ' + error.message);\n\n\t\t\tthis.emit('error', {\n\t\t\t\terror: new Error(`RTC Peer failed: ${error.message}`)\n\t\t\t});\n\t\t}\n\t}\n\n\t// connect rtc peer connection\n\tprivate _connectPeer(socketId: string) {\n\t\tif (!socketId) {\n\t\t\tthrow new Error('_connectPeer requires socket id.');\n\t\t}\n\n\t\tif (this._localStream === undefined && !this.connectReady) {\n\t\t\treturn this.warn('This remote peer is not ready for connection.', {\n\t\t\t\tready: this.connectReady,\n\t\t\t\tlocalStream: this._localStream,\n\t\t\t\tid: socketId\n\t\t\t});\n\t\t}\n\n\t\tthis._createPeer(socketId);\n\t\tthis._peers[socketId].addStream(this._localStream);\n\n\t\tif (this.isOriginator) {\n\t\t\tthis.log('client > you are the host.');\n\t\t\tthis.log('client > creating offer:', socketId);\n\n\t\t\tthis._rtcEvents.makeOffer(socketId);\n\t\t} else {\n\t\t\tthis.log('client > you are the agent.');\n\t\t}\n\t}\n\n\tprivate _removePeer(socketId: string) {\n\t\tif (!socketId) {\n\t\t\tthis._peers.forEach((peer: any, index: number) => {\n\t\t\t\tthis.log('Closing peer connection:', { id: socketId, peer });\n\t\t\t\tpeer.close();\n\t\t\t\tdelete this._peers[index];\n\t\t\t});\n\t\t\tthis._streams = {};\n\t\t} else {\n\t\t\tif (!this._peers[socketId]) return;\n\t\t\tthis._peers[socketId].close();\n\t\t\tdelete this._peers[socketId];\n\t\t\tdelete this._peers[socketId];\n\t\t}\n\n\t\tthis.emit('left', { id: socketId });\n\t}\n\n\t// server event emitter\n\tprivate _sendMessage(event: any) {\n\t\tsetTimeout(() => {\n\t\t\tthis.socket.emit('message', { ...event, id: event.id });\n\t\t}, 0);\n\t}\n\n\t// public method: join room\n\tjoinRoom(name: string, room: string) {\n\t\tif (this.room) {\n\t\t\treturn this.warn('You are currently in a room.');\n\t\t}\n\n\t\tif (!room) {\n\t\t\treturn this.error('Room name was not provided to join.');\n\t\t}\n\n\t\t// create room\n\t\tthis.user.name = name;\n\t\tthis.log('client > create or join', { name: this.user.name, room });\n\t\tthis.socket.emit('create or join', {\n\t\t\tuser: this.user,\n\t\t\tname: this.user.name,\n\t\t\troom\n\t\t});\n\t}\n\n\t// public method: leave room\n\tleaveRoom(room: string) {\n\t\t// leave room\n\t\tthis.log('leaving room', { name: this.user.name, room });\n\n\t\tthis.isOriginator = false;\n\t\tthis._sendMessage({ type: 'left', user: this.user });\n\t}\n\n\t// public method: sends message to server\n\t// broadcasting stream is ready\n\tsendStreamReady() {\n\t\tif (this.room) {\n\t\t\tthis._sendMessage({ type: 'stream-ready', room: this.room });\n\t\t} else {\n\t\t\tthis.warn('You need to join a room before streaming.');\n\t\t}\n\t}\n\n\tstopListeners() {\n\t\tthis.removeAllListeners();\n\t\tthis.socket.removeAllListeners();\n\t\tif (this._myId) {\n\t\t\tthis._peers[this._myId as string]?.close();\n\t\t\tthis._localStream?.getTracks().forEach((track) => track.stop());\n\t\t\tremoveVideoElement({ id: this._myId });\n\t\t\tthis.log('Destroyed RTC session.');\n\t\t}\n\t}\n}\n\nexport default RTCModule;\n"],"names":["removeVideoElement","id","defaultSocketOptions","defaultLoggingOptions","createSocket","overrideOptions","io","RTCModule","EventEmitter","path","ioOptions","iceConfig","logging","event","socketId","candidate","sessionDescription","connectionState","error","name","gridId","videoGrid","err","stream","peer","index","room","track"],"mappings":"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"}