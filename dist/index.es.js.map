{
	"version": 3,
	"file": "index.es.js",
	"sources": [
		"../src/utils/removeVideoElement.tsx",
		"../src/modules/RTCPeer2Peer.ts"
	],
	"sourcesContent": [
		"export const removeVideoElement = ({ id }: { id: string | undefined }) => {\n  const videoEl = document.getElementById(`vid_${id}`);\n  videoEl?.remove();\n};\n",
		"// import { Socket } from 'socket.io-client';\nimport { IceConfig } from '../config/iceConfig';\nimport { IPeers, IStreams, ILogs } from '../types/RTCFactory.types';\nimport EventEmitter from 'eventemitter3';\nimport { removeVideoElement } from '../utils/removeVideoElement';\nimport { Socket } from 'socket.io-client';\n\nclass RTCPeer2Peer extends EventEmitter {\n\tprivate peers: IPeers = {};\n\tprivate streams: IStreams;\n\tprivate _localStream: MediaStream | undefined;\n\tprivate _myId: string | undefined;\n\tprivate _isAdmin: boolean | undefined;\n\tlog: ILogs['log'];\n\twarn: ILogs['warn'];\n\terror: ILogs['error'];\n\tuser: { name?: string };\n\troom: string | undefined;\n\tsocket: Socket;\n\tpcConfig: IceConfig;\n\tconnectReady: boolean;\n\tisOriginator: boolean;\n\tinCall: boolean;\n\n\tconstructor({\n\t\tsocket,\n\t\tpcConfig,\n\t\tlogging = { log: true, warn: true, error: true }\n\t}: {\n\t\tsocket: any;\n\t\tpcConfig: IceConfig;\n\t\tlogging: { log?: boolean; warn?: boolean; error?: boolean };\n\t}) {\n\t\tsuper();\n\t\tthis.log = logging.log ? console.log : () => {};\n\t\tthis.warn = logging.warn ? console.warn : () => {};\n\t\tthis.error = logging.error ? console.error : () => {};\n\t\tthis.socket = socket;\n\t\tthis.pcConfig = pcConfig as IceConfig;\n\t\tthis.streams = {};\n\t\tthis.user = {};\n\t\tthis.isOriginator = false;\n\t\tthis.connectReady = false;\n\t\tthis.inCall = false;\n\t}\n\n\t// get stream ready\n\tasync getMyStream({ name, gridId }: { name: string; gridId: string }) {\n\t\tconst videoGrid = document.getElementById(gridId);\n\n\t\tif (!name) {\n\t\t\tthrow new Error(`Video name in stream options is required.`);\n\t\t}\n\n\t\tif (!gridId) {\n\t\t\tthrow new Error(`Video gridId in stream options is required.`);\n\t\t}\n\n\t\tif (!videoGrid) {\n\t\t\tthrow new Error(`Element with id '${gridId}' is required.`);\n\t\t}\n\n\t\treturn navigator.mediaDevices.getUserMedia({ audio: false, video: true }).then((stream) => {\n\t\t\tthis.log('Media stream ready.');\n\t\t\tthis.user.name = name;\n\t\t\treturn (this._localStream = stream);\n\t\t});\n\t}\n\n\t// initialize listeners\n\tstartListeners() {\n\t\tthis._establishSocketListeners();\n\t}\n\n\t// establish socket listeners\n\tprivate _establishSocketListeners() {\n\t\t// initial connect\n\t\t// if (!this.socket.connected)\n\t\tthis.socket.disconnect();\n\t\tthis.socket.connect();\n\t\t// listen for connection confirmation\n\t\tthis.socket.on('connect', this._socketEvents.connect.bind(this));\n\t\t// logger event\n\t\tthis.socket.on('log', this._socketEvents.log.bind(this));\n\t\t// created room event\n\t\tthis.socket.on('created', this._socketEvents.created.bind(this));\n\t\t// joined room event\n\t\tthis.socket.on('joined', this._socketEvents.joined.bind(this));\n\t\t// join room event\n\t\tthis.socket.on('join', this._socketEvents.join.bind(this));\n\t\t// signal message event\n\t\tthis.socket.on('message', this._socketEvents.message.bind(this));\n\t\t// room ready event\n\t\tthis.socket.on('ready', this._socketEvents.ready.bind(this));\n\t\t// stream ready event\n\t\tthis.socket.on('stream', this._socketEvents.stream.bind(this));\n\t}\n\n\t// socket listener events\n\tprivate _socketEvents = {\n\t\tlog: (event: [message?: any, ...optionalParams: any[]]) => {\n\t\t\tthis.log.apply(console, event);\n\t\t},\n\t\tconnect: () => {\n\t\t\tthis.log('RTC sockets ready.');\n\t\t\treturn this;\n\t\t},\n\t\tcreated: (event: { id: string | undefined; room: string | undefined }) => {\n\t\t\tthis._myId = event.id;\n\t\t\tthis.room = event.room;\n\t\t\tthis.isOriginator = true;\n\t\t\tthis._isAdmin = true;\n\n\t\t\tthis.log('Created room:', { event });\n\t\t\tthis.emit('created', event);\n\t\t},\n\t\tjoined: (event: { id: string | undefined; room: string | undefined; user: any }) => {\n\t\t\tthis._myId = event.id;\n\t\t\tthis.room = event.room;\n\t\t\tthis.connectReady = true;\n\t\t\tthis.log('Joined room:', { event });\n\t\t\tthis.emit('joined', event);\n\t\t},\n\t\tjoin: () => {\n\t\t\tthis.connectReady = true;\n\n\t\t\tthis.emit('newJoin', { newJoin: true });\n\t\t},\n\t\tmessage: (event: {\n\t\t\tid: any;\n\t\t\ttype: string;\n\t\t\tsdp: RTCSessionDescriptionInit;\n\t\t\tcandidate: RTCIceCandidateInit | undefined;\n\t\t}) => {\n\t\t\tconst socketId = event.id;\n\n\t\t\tif (event.type === 'left') {\n\t\t\t\tthis.log(socketId, 'has left the call.', { event });\n\n\t\t\t\tthis._removePeer(socketId);\n\t\t\t\tthis.isOriginator = true;\n\n\t\t\t\tthis.emit('userLeave', { id: socketId });\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// prevent duplicate connection attempts\n\t\t\tif (this.peers[socketId] && this.peers[socketId].connectionState === 'connected') {\n\t\t\t\tthis.log('Connection with', socketId, 'is already established', {\n\t\t\t\t\tpeersEstablished: this.peers\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tswitch (event.type) {\n\t\t\t\tcase 'stream-ready':\n\t\t\t\t\tthis._connectPeer(socketId);\n\t\t\t\t\tthis.log('Client -> Incoming stream, creating peer, adding stream, and making offer:', {\n\t\t\t\t\t\tmyId: this._myId,\n\t\t\t\t\t\ttheirId: socketId,\n\t\t\t\t\t\tstreams: this.streams,\n\t\t\t\t\t\tconnections: this.peers\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\tcase 'offer':\n\t\t\t\t\tif (!this.peers[socketId]) {\n\t\t\t\t\t\tthis._connectPeer(socketId);\n\t\t\t\t\t}\n\t\t\t\t\tthis.peers[socketId].setRemoteDescription(new RTCSessionDescription(event.sdp));\n\t\t\t\t\tthis._rtcEvents.makeAnswer(socketId);\n\t\t\t\t\treturn;\n\t\t\t\tcase 'answer':\n\t\t\t\t\tthis.peers[socketId].setRemoteDescription(new RTCSessionDescription(event.sdp));\n\t\t\t\t\treturn;\n\t\t\t\tcase 'candidate':\n\t\t\t\t\tif (!event?.candidate) {\n\t\t\t\t\t\treturn this.error('Client is missing event candidate.');\n\t\t\t\t\t}\n\t\t\t\t\tthis.inCall = true;\n\t\t\t\t\tconst candidate = new RTCIceCandidate(event.candidate);\n\t\t\t\t\tthis.peers[socketId].addIceCandidate(candidate);\n\t\t\t\t\treturn;\n\t\t\t\tdefault:\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t},\n\t\tready: (event: { id: string | undefined }) => {\n\t\t\tif (event.id !== this._myId) this.isOriginator = true;\n\t\t},\n\t\tstream() {\n\t\t\tconsole.log('TODO socket stream event!');\n\t\t}\n\t};\n\n\tprivate _rtcEvents = {\n\t\tmakeOffer: (socketId: string) => {\n\t\t\tthis.log('Making offer:', { peer: this.peers[socketId] });\n\n\t\t\tthis.peers[socketId]\n\t\t\t\t.createOffer()\n\t\t\t\t.then(this._rtcEvents.sendLocalDescription.bind(this, socketId), this._rtcEvents.createOfferError);\n\t\t},\n\t\tmakeAnswer: (socketId: string) => {\n\t\t\tthis.log('Sending answer:', { peer: this.peers[socketId] });\n\n\t\t\tthis.peers[socketId]\n\t\t\t\t.createAnswer()\n\t\t\t\t.then(this._rtcEvents.sendLocalDescription.bind(this, socketId), this._rtcEvents.sdpError);\n\t\t},\n\t\tsendLocalDescription: async (socketId: string, sessionDescription: any) => {\n\t\t\ttry {\n\t\t\t\tawait this.peers[socketId].setLocalDescription(sessionDescription);\n\t\t\t\tthis._sendMessage({\n\t\t\t\t\ttoId: socketId,\n\t\t\t\t\tname: this.user.name,\n\t\t\t\t\troom: this.room,\n\t\t\t\t\tsdp: sessionDescription,\n\t\t\t\t\ttype: sessionDescription.type\n\t\t\t\t});\n\t\t\t} catch (e) {\n\t\t\t\tif (this.peers[socketId].connectionState !== 'new') {\n\t\t\t\t\tthis.error('Failed to setLocalDescription', {\n\t\t\t\t\t\tstate: this.peers[socketId].connectionState,\n\t\t\t\t\t\tpeer: this.peers[socketId],\n\t\t\t\t\t\tpeers: this.peers\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\taddTrack: (socketId: string, event: { streams: MediaStream[] }) => {\n\t\t\tthis.log('Remote stream added for ', this.peers[socketId]);\n\n\t\t\tif (this.streams[socketId]?.id !== event.streams[0].id) {\n\t\t\t\tthis.streams[socketId] = event.streams[0];\n\n\t\t\t\tthis.emit('stream', {\n\t\t\t\t\tid: socketId,\n\t\t\t\t\tstream: event.streams[0]\n\t\t\t\t});\n\t\t\t\tthis.socket.emit('stream', {\n\t\t\t\t\tid: socketId,\n\t\t\t\t\tstream: event.streams[0]\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\tremoveTrack: (socketId: string, event: { streams: MediaStream[] }) => {\n\t\t\tthis.isOriginator = false;\n\t\t\tthis._removePeer(socketId);\n\n\t\t\tthis.emit('left', {\n\t\t\t\tid: socketId,\n\t\t\t\tstream: event.streams[0]\n\t\t\t});\n\t\t},\n\t\ticeCandidate: (socketId: string, event: RTCIceCandidate) => {\n\t\t\tif (event.candidate) {\n\t\t\t\tthis._sendMessage({\n\t\t\t\t\ttoId: socketId,\n\t\t\t\t\tname: this.user.name,\n\t\t\t\t\troom: this.room,\n\t\t\t\t\tcandidate: event.candidate,\n\t\t\t\t\ttype: 'candidate'\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\tstateChange: (socketId: string, event: RTCSignalingState) => {\n\t\t\tconst connectionState: RTCPeerConnectionState = this.peers[socketId].connectionState;\n\t\t\tthis.log('RTC state change:', connectionState);\n\t\t\tif (connectionState === 'disconnected' || connectionState === 'failed') {\n\t\t\t\tthis.emit('left', {\n\t\t\t\t\tid: socketId\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\tsdpError: (error: RTCError) => {\n\t\t\tthis.log('Session description error: ' + error.toString());\n\n\t\t\tthis.emit('error', {\n\t\t\t\terror: new Error(`Session description error: ${error.toString()}`)\n\t\t\t});\n\t\t},\n\t\tcreateOfferError: () => {\n\t\t\tthis.error('ERROR creating offer');\n\n\t\t\tthis.emit('error', {\n\t\t\t\terror: new Error('Error while creating an offer')\n\t\t\t});\n\t\t}\n\t};\n\n\tprivate async _createPeer(socketId: string) {\n\t\ttry {\n\t\t\tif (this.peers[socketId]) {\n\t\t\t\t// do not create peer if connection is already established\n\t\t\t\tthis.warn(\"You're already connected with:\", socketId);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.peers[socketId] = new RTCPeerConnection(this.pcConfig as RTCConfiguration);\n\t\t\tthis.peers[socketId].onicecandidate = this._rtcEvents.iceCandidate.bind(this, socketId);\n\t\t\tthis.peers[socketId].ontrack = this._rtcEvents.addTrack.bind(this, socketId);\n\t\t\tthis.peers[socketId].onremovetrack = this._rtcEvents.removeTrack.bind(this, socketId);\n\t\t\tthis.peers[socketId].onconnectionstatechange = this._rtcEvents.stateChange.bind(this, socketId);\n\n\t\t\tthis.log('Created RTC Peer for:', { socketId, peers: this.peers });\n\t\t} catch (error: any) {\n\t\t\tthis.error('RTC Peer failed: ' + error.message);\n\n\t\t\tthis.emit('error', {\n\t\t\t\terror: new Error(`RTC Peer failed: ${error.message}`)\n\t\t\t});\n\t\t}\n\t}\n\n\t// connect rtc peer connection\n\tprivate _connectPeer(socketId: string) {\n\t\tif (this._localStream === undefined && !this.connectReady) {\n\t\t\treturn this.warn('This remote peer is not ready for connection.', {\n\t\t\t\tready: this.connectReady,\n\t\t\t\tlocalStream: this._localStream,\n\t\t\t\tid: socketId\n\t\t\t});\n\t\t}\n\n\t\tthis._createPeer(socketId);\n\t\tthis.peers[socketId].addStream(this._localStream);\n\n\t\tif (this.isOriginator) {\n\t\t\tthis.log('FYI - You initiated this call.');\n\t\t\tthis.log('Creating offer for:', socketId);\n\n\t\t\tthis._rtcEvents.makeOffer(socketId);\n\t\t} else {\n\t\t\tthis.log('FYI - You received this call.');\n\t\t}\n\t}\n\n\tprivate _removePeer(socketId: string) {\n\t\tif (!socketId) {\n\t\t\tthis.peers.forEach((peer: any, index: number) => {\n\t\t\t\tthis.log('Closing peer connection:', { id: socketId, peer });\n\t\t\t\tpeer.close();\n\t\t\t\tdelete this.peers[index];\n\t\t\t});\n\t\t\tthis.streams = {};\n\t\t} else {\n\t\t\tif (!this.peers[socketId]) return;\n\t\t\tthis.peers[socketId].close();\n\t\t\tdelete this.peers[socketId];\n\t\t\tdelete this.streams[socketId];\n\t\t}\n\n\t\tthis.emit('left', { id: socketId });\n\t}\n\n\t// server event emitter\n\tprivate _sendMessage(event: any) {\n\t\tsetTimeout(() => {\n\t\t\tthis.socket.emit('message', { ...event, id: event.id });\n\t\t}, 0);\n\t}\n\n\t// public method: join room\n\tjoinRoom(name: string, room: string) {\n\t\tif (this.room) {\n\t\t\treturn this.warn('You are currently in a room.');\n\t\t}\n\n\t\tif (!room) {\n\t\t\treturn this.error('Room name was not provided to join.');\n\t\t}\n\n\t\t// create room\n\t\tthis.user.name = name;\n\t\tthis.log('create or join', { name: this.user.name, room });\n\t\tthis.socket.emit('create or join', {\n\t\t\tuser: this.user,\n\t\t\tname: this.user.name,\n\t\t\troom\n\t\t});\n\t}\n\n\t// public method: leave room\n\tleaveRoom(room: string) {\n\t\t// leave room\n\t\tthis.log('leaving room', { name: this.user.name, room });\n\n\t\tthis.isOriginator = false;\n\t\tthis._sendMessage({ type: 'left', user: this.user });\n\t}\n\n\t// public method: sends message to server\n\t// broadcasting stream is ready\n\tsendStreamReady() {\n\t\tif (this.room) {\n\t\t\tthis._sendMessage({ type: 'stream-ready', room: this.room });\n\t\t} else {\n\t\t\tthis.warn('You need to join a room before streaming.');\n\t\t}\n\t}\n\n\tclean() {\n\t\tthis.removeAllListeners();\n\t\tthis.socket.removeAllListeners();\n\t\tif (this._myId) {\n\t\t\tthis.peers[this._myId as string]?.close();\n\t\t\tthis._localStream?.getTracks().forEach((track) => track.stop());\n\t\t\tremoveVideoElement({ id: this._myId });\n\t\t\tthis.log('Destroyed RTC session.');\n\t\t}\n\t}\n}\n\n// export default RTCPeer2Peer;\n// module.exports = {\n// \tStreamService: RTCPeer2Peer\n// };\n\nmodule.exports = RTCPeer2Peer;\n"
	],
	"names": [
		"removeVideoElement",
		"id",
		"RTCPeer2Peer",
		"EventEmitter",
		"socket",
		"pcConfig",
		"logging",
		"event",
		"socketId",
		"candidate",
		"sessionDescription",
		"connectionState",
		"error",
		"name",
		"gridId",
		"videoGrid",
		"stream",
		"peer",
		"index",
		"room",
		"track",
		"module"
	],
	"mappings": "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"
}
